{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { checkAuthMe } from \"./header_reducer\";\nimport { check_auth_me } from \"./profile_reducer\";\nvar initialState = {\n  initialized: false\n};\n\nvar app_reducer = function app_reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INIT':\n      {\n        return _objectSpread({}, state, {\n          initialized: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport var actions = {\n  initialize: function initialize() {\n    return {\n      type: 'INIT'\n    };\n  }\n};\nexport var init = function init() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var promise;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              promise = dispatch(checkAuthMe());\n              Promise.all([promise]).then(function () {\n                dispatch(check_auth_me());\n              }).then(function () {\n                dispatch(actions.initialize());\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport default app_reducer;","map":{"version":3,"sources":["C:/Users/dikush/Documents/GitHub/react-my-way/src/redux/app_reducer.ts"],"names":["checkAuthMe","check_auth_me","initialState","initialized","app_reducer","state","action","type","actions","initialize","init","dispatch","promise","Promise","all","then"],"mappings":";;;AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,aAAR,QAA4B,mBAA5B;AAKA,IAAIC,YAAY,GAAG;AACfC,EAAAA,WAAW,EAAE;AADE,CAAnB;;AAMA,IAAIC,WAAW,GAAG,SAAdA,WAAc,GAAiE;AAAA,MAAhEC,KAAgE,uEAAxDH,YAAwD;AAAA,MAA1CI,MAA0C;;AAE/E,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,MAAL;AAAa;AACT,iCACOF,KADP;AAEIF,UAAAA,WAAW,EAAE;AAFjB;AAIH;;AACD;AACI,aAAOE,KAAP;AATR;AAWH,CAbD;;AAeA,OAAO,IAAMG,OAAO,GAAG;AACnBC,EAAAA,UAAU,EAAE;AAAA,WAAO;AAACF,MAAAA,IAAI,EAAE;AAAP,KAAP;AAAA;AADO,CAAhB;AAOP,OAAO,IAAMG,IAAI,GAAG,SAAPA,IAAO;AAAA;AAAA,wEAAoB,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChCC,cAAAA,OADgC,GACtBD,QAAQ,CAACX,WAAW,EAAZ,CADc;AAGpCa,cAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,OAAD,CAAZ,EACKG,IADL,CACU,YAAM;AACRJ,gBAAAA,QAAQ,CAACV,aAAa,EAAd,CAAR;AACH,eAHL,EAIKc,IAJL,CAIU,YAAK;AACPJ,gBAAAA,QAAQ,CAACH,OAAO,CAACC,UAAR,EAAD,CAAR;AACH,eANL;;AAHoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAb;AAYP,eAAeL,WAAf","sourcesContent":["import {checkAuthMe} from \"./header_reducer\";\r\nimport {check_auth_me} from \"./profile_reducer\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppStateType, InferActionsTypes } from \"./store-redux\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nlet app_reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'INIT': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initialize: () => ({type: 'INIT'} as const)\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype GetThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const init = (): GetThunkType => async (dispatch) => {\r\n    let promise = dispatch(checkAuthMe())\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(check_auth_me())\r\n        })\r\n        .then(()=> {\r\n            dispatch(actions.initialize());\r\n        })\r\n}\r\n\r\nexport default app_reducer"]},"metadata":{},"sourceType":"module"}