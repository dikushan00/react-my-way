{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\src\\\\components\\\\Music\\\\Controls.tsx\";\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions } from \"../../redux/music_reducer\";\nimport { faPause, faPlay, faRandom, faRedoAlt, faStepBackward, faStepForward, faVolumeDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Music.css';\n\nvar Controls = function Controls() {\n  var dispatch = useDispatch();\n  var playing = useSelector(function (state) {\n    return state.music.playing;\n  });\n  var currentSong = useSelector(function (state) {\n    return state.music.currentSong;\n  });\n  var random = useSelector(function (state) {\n    return state.music.random;\n  });\n  var songs = useSelector(function (state) {\n    return state.music.songs;\n  });\n  var repeat = useSelector(function (state) {\n    return state.music.repeat;\n  });\n  var currentTimeState = useSelector(function (state) {\n    return state.music.currentTime;\n  });\n  var audio = useRef('audio_tag');\n\n  var _useState = useState(0.3),\n      _useState2 = _slicedToArray(_useState, 2),\n      statevolum = _useState2[0],\n      setStateVolum = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dur = _useState4[0],\n      setDur = _useState4[1];\n\n  var _useState5 = useState(currentTimeState),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentTime = _useState6[0],\n      setCurrentTime = _useState6[1];\n\n  var fmtMSS = function fmtMSS(s) {\n    return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + ~~s;\n  }; //@ts-ignore\n\n\n  var toggleAudio = function toggleAudio() {\n    return audio.current.paused ? audio.current.play() : audio.current.pause();\n  };\n\n  var handleVolume = function handleVolume(q) {\n    setStateVolum(q); //@ts-ignore\n\n    audio.current.volume = q;\n  };\n\n  var handleProgress = function handleProgress(e) {\n    //@ts-ignore\n    var compute = e.target.value * dur / 100;\n    setCurrentTime(compute); //@ts-ignore\n\n    audio.current.currentTime = compute;\n  }; // Prev song\n\n\n  var prevSong = function prevSong() {\n    if (currentSong === 0) {\n      SetCurrent(songs.length - 1);\n    } else {\n      SetCurrent(currentSong - 1);\n    }\n  }; // Next song\n\n\n  var nextSong = function nextSong() {\n    if (currentSong === songs.length - 1) {\n      SetCurrent(0);\n    } else {\n      SetCurrent(currentSong + 1);\n    }\n  };\n\n  var handleEnd = function handleEnd() {\n    // Check for random and repeat options\n    if (random) {\n      return dispatch({\n        type: 'SET_CURRENT_SONG',\n        data: ~~(Math.random() * songs.length)\n      });\n    } else {\n      if (repeat) {\n        nextSong();\n      } else if (currentSong === songs.length - 1) {\n        return;\n      } else {\n        nextSong();\n      }\n    }\n  };\n\n  var handleUpdateTime = function handleUpdateTime(e) {\n    setCurrentTime(e.target.currentTime);\n    dispatch(actions.updateCurrentTime(currentTime));\n  };\n\n  var SetCurrent = function SetCurrent(id) {\n    dispatch(actions.SetCurrent(id));\n  };\n\n  var togglePlaying = function togglePlaying() {\n    dispatch(actions.togglePlaying());\n  };\n\n  var toggleRandom = function toggleRandom() {\n    dispatch(actions.toggleRandom());\n  };\n\n  var toggleRepeat = function toggleRepeat() {\n    dispatch(actions.toggleRepeat());\n  };\n\n  useEffect(function () {\n    //@ts-ignore\n    audio.current.volume = statevolum;\n\n    if (playing) {\n      toggleAudio();\n    } //@ts-ignore\n\n\n    audio.current.currentTime = currentTime;\n  }, [currentSong]);\n  useEffect(function () {\n    //@ts-ignore\n    audio.current.currentTime = currentTime;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"controls\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    //@ts-ignore\n    onTimeUpdate: function onTimeUpdate(e) {\n      return handleUpdateTime(e);\n    } //@ts-ignore\n    ,\n    onCanPlay: function onCanPlay(e) {\n      return setDur(e.target.duration);\n    },\n    onEnded: handleEnd //@ts-ignore\n    ,\n    ref: audio,\n    type: \"audio/mpeg\",\n    preload: \"true\",\n    src: songs[currentSong][1],\n    id: \"audioMusic\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vlme\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"volum\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faVolumeDown,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    value: Math.round(statevolum * 100),\n    type: \"range\",\n    name: \"volBar\",\n    id: \"volBar\",\n    onChange: function onChange(e) {\n      //@ts-ignore\n      return handleVolume(e.target.value / 100);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"musicControls\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"prev\",\n    onClick: prevSong,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faStepBackward,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 59\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"play\",\n    onClick: function onClick() {\n      togglePlaying();\n      toggleAudio();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: !playing ? '' : 'hide',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 62\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: !playing ? 'hide' : '',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPause,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 62\n    }\n  }))), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"next\",\n    onClick: nextSong,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faStepForward,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 59\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressb\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"currentT\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, fmtMSS(currentTime)), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleProgress,\n    value: dur ? currentTime * 100 / dur : 0,\n    type: \"range\",\n    name: \"progresBar\",\n    id: \"prgbar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"totalT\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, fmtMSS(dur))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plsoptions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: toggleRandom,\n    className: \"random \" + (random ? 'active' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faRandom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    onClick: toggleRepeat,\n    className: \"repeat \" + (repeat ? 'active' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faRedoAlt,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default Controls;","map":{"version":3,"sources":["C:/Users/dikush/Documents/GitHub/react-my-way/src/components/Music/Controls.tsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","actions","faPause","faPlay","faRandom","faRedoAlt","faStepBackward","faStepForward","faVolumeDown","FontAwesomeIcon","Controls","dispatch","playing","state","music","currentSong","random","songs","repeat","currentTimeState","currentTime","audio","statevolum","setStateVolum","dur","setDur","setCurrentTime","fmtMSS","s","toggleAudio","current","paused","play","pause","handleVolume","q","volume","handleProgress","e","compute","target","value","prevSong","SetCurrent","length","nextSong","handleEnd","type","data","Math","handleUpdateTime","updateCurrentTime","id","togglePlaying","toggleRandom","toggleRepeat","duration","round"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, useEffect, useRef, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store-redux\";\r\nimport {actions} from \"../../redux/music_reducer\";\r\nimport { faPause, faPlay, faRandom, faRedoAlt, faStepBackward, faStepForward, faVolumeDown } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './Music.css'\r\n\r\nconst Controls = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const playing = useSelector((state: AppStateType) => state.music.playing)\r\n    const currentSong = useSelector((state: AppStateType) => state.music.currentSong)\r\n    const random = useSelector((state: AppStateType) => state.music.random)\r\n    const songs = useSelector((state: AppStateType) => state.music.songs)\r\n    const repeat = useSelector((state: AppStateType) => state.music.repeat)\r\n    const currentTimeState = useSelector((state: AppStateType) => state.music.currentTime)\r\n\r\n    const audio = useRef('audio_tag');\r\n\r\n    const [statevolum, setStateVolum] = useState(0.3)\r\n    const [dur, setDur] = useState(0)\r\n    const [currentTime, setCurrentTime] = useState(currentTimeState)\r\n\r\n    const fmtMSS = (s: number) => { return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + ~~(s) }\r\n\r\n    //@ts-ignore\r\n    const toggleAudio = () => audio.current.paused ? audio.current.play() : audio.current.pause();\r\n\r\n    const handleVolume = (q: number ) => {\r\n        setStateVolum(q);\r\n        //@ts-ignore\r\n        audio.current.volume = q;\r\n    }\r\n\r\n    const handleProgress = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //@ts-ignore\r\n        let compute = (e.target.value * dur) / 100;\r\n        setCurrentTime(compute);\r\n        //@ts-ignore\r\n        audio.current.currentTime = compute\r\n    }\r\n    // Prev song\r\n    const prevSong = () => {\r\n        if (currentSong === 0) {\r\n            SetCurrent(songs.length - 1)\r\n        } else {\r\n            SetCurrent(currentSong - 1)\r\n        }\r\n    }\r\n    // Next song\r\n    const nextSong = () => {\r\n        if (currentSong === songs.length - 1) {\r\n            SetCurrent(0)\r\n        } else {\r\n            SetCurrent(currentSong + 1)\r\n        }\r\n    }\r\n    const handleEnd = () => {\r\n        // Check for random and repeat options\r\n        if (random) {\r\n            return dispatch({ type: 'SET_CURRENT_SONG', data: ~~(Math.random() * songs.length) })\r\n        } else {\r\n            if (repeat) {\r\n                nextSong()\r\n            } else if ((currentSong === songs.length - 1)) {\r\n                return\r\n            } else {\r\n                nextSong();\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleUpdateTime = (e: any) => {\r\n        setCurrentTime(e.target.currentTime)\r\n        dispatch(actions.updateCurrentTime(currentTime))\r\n    }\r\n\r\n    const SetCurrent = (id: number) => {\r\n        dispatch(actions.SetCurrent(id))\r\n    }\r\n\r\n    const togglePlaying = () => {\r\n        dispatch(actions.togglePlaying())\r\n    }\r\n\r\n    const toggleRandom = () => {\r\n        dispatch(actions.toggleRandom())\r\n    }\r\n\r\n    const toggleRepeat = () => {\r\n        dispatch(actions.toggleRepeat())\r\n    }\r\n\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        audio.current.volume = statevolum;\r\n        if (playing) { toggleAudio() }\r\n        //@ts-ignore\r\n        audio.current.currentTime = currentTime\r\n    }, [currentSong])\r\n\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        audio.current.currentTime = currentTime\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"controls\">\r\n            <audio\r\n                //@ts-ignore\r\n                onTimeUpdate={(e) => handleUpdateTime(e)}\r\n                //@ts-ignore\r\n                onCanPlay={(e) => setDur(e.target.duration)}\r\n                onEnded={handleEnd}\r\n                //@ts-ignore\r\n                ref={audio}\r\n                type=\"audio/mpeg\"\r\n                preload='true'\r\n                src={songs[currentSong][1]} \r\n                id=\"audioMusic\"/>\r\n            <div className=\"vlme\">\r\n                <span className=\"volum\"><FontAwesomeIcon icon={faVolumeDown} /></span>\r\n                <input value={Math.round(statevolum * 100)} type=\"range\" name=\"volBar\" id=\"volBar\" onChange={\r\n                    (e) => {\r\n                        //@ts-ignore\r\n                        return handleVolume(e.target.value / 100)\r\n                        }} />\r\n\r\n            </div>\r\n            <div className=\"musicControls\">\r\n                <span className=\"prev\" onClick={prevSong}><FontAwesomeIcon icon={faStepBackward} /></span>\r\n                <span className=\"play\" onClick={() => { togglePlaying(); toggleAudio(); }}>\r\n                    <span className={!playing ? '' : 'hide'}><FontAwesomeIcon icon={faPlay} /></span>\r\n                    <span className={!playing ? 'hide' : ''}><FontAwesomeIcon icon={faPause} /></span>\r\n                </span>\r\n\r\n                <span className=\"next\" onClick={nextSong}><FontAwesomeIcon icon={faStepForward} /></span>\r\n            </div>\r\n            <div className=\"progressb\">\r\n                <span className=\"currentT\">{fmtMSS(currentTime)}</span>\r\n                <input\r\n                    onChange={handleProgress}\r\n                    value={dur ? (currentTime * 100) / dur : 0}\r\n                    type=\"range\" name=\"progresBar\" id=\"prgbar\" />\r\n                <span className=\"totalT\">{fmtMSS(dur)}</span>\r\n\r\n            </div>\r\n            <div className=\"plsoptions\">\r\n\r\n        <span onClick={toggleRandom} className={\"random \" + (random ? 'active' : '')}>\r\n        <FontAwesomeIcon icon={faRandom} />\r\n        </span>\r\n                <span onClick={toggleRepeat} className={\"repeat \" + (repeat ? 'active' : '')}>\r\n                <FontAwesomeIcon icon={faRedoAlt} />\r\n        </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls;"]},"metadata":{},"sourceType":"module"}