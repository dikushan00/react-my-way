{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { AuthAPI, LoginAPI, SecurityAPI, CaptchaEnum, ResultCodeEnum } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { check_auth_me } from \"./profile_reducer\";\nvar initialState = {\n  id: null,\n  login: null,\n  email: null,\n  isAuth: false,\n  captcha: null\n};\n\nvar header_reducer = function header_reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_NEW_AUTH':\n    case 'SET_NEW_CAPTCHA':\n      {\n        return _objectSpread({}, state, action.data);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport var actions = {\n  setNewAuth: function setNewAuth(id, login, email, isAuth) {\n    return {\n      type: 'SET_NEW_AUTH',\n      data: {\n        id: id,\n        login: login,\n        email: email,\n        isAuth: isAuth\n      }\n    };\n  },\n  setNewCaptcha: function setNewCaptcha(captcha) {\n    return {\n      type: 'SET_NEW_CAPTCHA',\n      data: {\n        captcha: captcha\n      }\n    };\n  }\n};\nexport var checkAuthMe = function checkAuthMe() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var data, _data$data, id, login, email;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return AuthAPI.checkAuthMe();\n\n            case 2:\n              data = _context.sent;\n\n              if (data.resultCode === ResultCodeEnum.Success) {\n                _data$data = data.data, id = _data$data.id, login = _data$data.login, email = _data$data.email;\n                dispatch(actions.setNewAuth(id, login, email, true));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var checkLoginMe = function checkLoginMe(email, password, rememberMe, captcha) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var response, message;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return LoginAPI.checkLogin(email, password, rememberMe, captcha);\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.data.resultCode === ResultCodeEnum.Success) {\n                dispatch(checkAuthMe());\n                dispatch(check_auth_me());\n              } else {\n                if (response.data.resultCode === CaptchaEnum.Captcha) {\n                  dispatch(getCaptcha());\n                }\n\n                message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error!';\n                dispatch(stopSubmit('login', {\n                  _error: message\n                }));\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var logoutMe = function logoutMe() {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return LoginAPI.logout();\n\n            case 2:\n              response = _context3.sent;\n\n              if (response.data.resultCode === ResultCodeEnum.Success) {\n                dispatch(actions.setNewAuth(null, null, null, false));\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getCaptcha = function getCaptcha() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return SecurityAPI.getCaptcha();\n\n            case 2:\n              response = _context4.sent;\n              dispatch(actions.setNewCaptcha(response.data.url));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport default header_reducer;","map":{"version":3,"sources":["C:/Users/dikush/Documents/GitHub/react-my-way/src/redux/header_reducer.ts"],"names":["AuthAPI","LoginAPI","SecurityAPI","CaptchaEnum","ResultCodeEnum","stopSubmit","check_auth_me","initialState","id","login","email","isAuth","captcha","header_reducer","state","action","type","data","actions","setNewAuth","setNewCaptcha","checkAuthMe","dispatch","resultCode","Success","checkLoginMe","password","rememberMe","checkLogin","response","Captcha","getCaptcha","message","messages","length","_error","logoutMe","logout","url"],"mappings":";;;AAAA,SAAQA,OAAR,EAAiBC,QAAjB,EAA2BC,WAA3B,EAAwCC,WAAxC,EAAqDC,cAArD,QAA0E,YAA1E;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAIA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA,OAAO,EAAE;AALM,CAAnB;;AAUA,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,GAAkE;AAAA,MAAjEC,KAAiE,uEAAzDP,YAAyD;AAAA,MAA3CQ,MAA2C;;AAEnF,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,cAAL;AACA,SAAK,iBAAL;AAAwB;AACpB,iCACOF,KADP,EAEOC,MAAM,CAACE,IAFd;AAIH;;AACD;AACI,aAAOH,KAAP;AAVR;AAYH,CAdD;;AAgBA,OAAO,IAAMI,OAAO,GAAG;AACnBC,EAAAA,UAAU,EAAE,oBAACX,EAAD,EAAoBC,KAApB,EAA2CC,KAA3C,EAAkEC,MAAlE;AAAA,WAAuF;AAACK,MAAAA,IAAI,EAAE,cAAP;AAAuBC,MAAAA,IAAI,EAAE;AAACT,QAAAA,EAAE,EAAFA,EAAD;AAAKC,QAAAA,KAAK,EAALA,KAAL;AAAYC,QAAAA,KAAK,EAALA,KAAZ;AAAmBC,QAAAA,MAAM,EAANA;AAAnB;AAA7B,KAAvF;AAAA,GADO;AAEnBS,EAAAA,aAAa,EAAE,uBAACR,OAAD;AAAA,WAAsB;AAACI,MAAAA,IAAI,EAAE,iBAAP;AAA0BC,MAAAA,IAAI,EAAE;AAACL,QAAAA,OAAO,EAAPA;AAAD;AAAhC,KAAtB;AAAA;AAFI,CAAhB;AASP,OAAO,IAAMS,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA,wEAAoB,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACxBtB,OAAO,CAACqB,WAAR,EADwB;;AAAA;AACrCJ,cAAAA,IADqC;;AAE3C,kBAAIA,IAAI,CAACM,UAAL,KAAoBnB,cAAc,CAACoB,OAAvC,EAAgD;AAAA,6BACnBP,IAAI,CAACA,IADc,EACvCT,EADuC,cACvCA,EADuC,EACnCC,KADmC,cACnCA,KADmC,EAC5BC,KAD4B,cAC5BA,KAD4B;AAE5CY,gBAAAA,QAAQ,CAACJ,OAAO,CAACC,UAAR,CAAmBX,EAAnB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC,IAArC,CAAD,CAAR;AACH;;AAL0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAQP,OAAO,IAAMe,YAAY,GAAG,SAAfA,YAAe,CAACf,KAAD,EAAuBgB,QAAvB,EAAgDC,UAAhD,EAAqEf,OAArE;AAAA;AAAA,yEAAiG,kBAAOU,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAClGrB,QAAQ,CAAC2B,UAAT,CAAoBlB,KAApB,EAA2BgB,QAA3B,EAAqCC,UAArC,EAAiDf,OAAjD,CADkG;;AAAA;AACnHiB,cAAAA,QADmH;;AAGzH,kBAAIA,QAAQ,CAACZ,IAAT,CAAcM,UAAd,KAA6BnB,cAAc,CAACoB,OAAhD,EAAyD;AACrDF,gBAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACAC,gBAAAA,QAAQ,CAAChB,aAAa,EAAd,CAAR;AACH,eAHD,MAGO;AACH,oBAAGuB,QAAQ,CAACZ,IAAT,CAAcM,UAAd,KAA6BpB,WAAW,CAAC2B,OAA5C,EAAoD;AAChDR,kBAAAA,QAAQ,CAACS,UAAU,EAAX,CAAR;AACH;;AACGC,gBAAAA,OAJD,GAIWH,QAAQ,CAACZ,IAAT,CAAcgB,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCL,QAAQ,CAACZ,IAAT,CAAcgB,QAAd,CAAuB,CAAvB,CAApC,GAAgE,aAJ3E;AAKHX,gBAAAA,QAAQ,CAACjB,UAAU,CAAC,OAAD,EAAU;AAAC8B,kBAAAA,MAAM,EAAEH;AAAT,iBAAV,CAAX,CAAR;AACH;;AAZwH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjG;;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAeP,OAAO,IAAMI,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA,yEAAoB,kBAAOd,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACjBrB,QAAQ,CAACoC,MAAT,EADiB;;AAAA;AAClCR,cAAAA,QADkC;;AAExC,kBAAIA,QAAQ,CAACZ,IAAT,CAAcM,UAAd,KAA6BnB,cAAc,CAACoB,OAAhD,EAAyD;AACrDF,gBAAAA,QAAQ,CAACJ,OAAO,CAACC,UAAR,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,KAArC,CAAD,CAAR;AACH;;AAJuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;AAOP,OAAO,IAAMY,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA,yEAAoB,kBAAOT,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACnBpB,WAAW,CAAC6B,UAAZ,EADmB;;AAAA;AACpCF,cAAAA,QADoC;AAE1CP,cAAAA,QAAQ,CAACJ,OAAO,CAACE,aAAR,CAAsBS,QAAQ,CAACZ,IAAT,CAAcqB,GAApC,CAAD,CAAR;;AAF0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAKP,eAAezB,cAAf","sourcesContent":["import {AuthAPI, LoginAPI, SecurityAPI, CaptchaEnum, ResultCodeEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport { check_auth_me } from \"./profile_reducer\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppStateType, InferActionsTypes } from \"./store-redux\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nlet header_reducer = (state = initialState, action : ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SET_NEW_AUTH':\r\n        case 'SET_NEW_CAPTCHA': {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setNewAuth: (id :number | null, login : string | null, email : string | null, isAuth: boolean) => ({type: 'SET_NEW_AUTH', data: {id, login, email, isAuth}} as const),\r\n    setNewCaptcha: (captcha: string) => ({type: 'SET_NEW_CAPTCHA', data: {captcha}} as const)\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\ntype GetThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const checkAuthMe = (): GetThunkType => async (dispatch) => {\r\n    const data = await AuthAPI.checkAuthMe()\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = data.data\r\n        dispatch(actions.setNewAuth(id, login, email, true))\r\n    }\r\n}\r\n\r\nexport const checkLoginMe = (email: string | null, password: string | null, rememberMe: boolean, captcha : string | null) => async (dispatch: any) => {\r\n    const response = await LoginAPI.checkLogin(email, password, rememberMe, captcha)\r\n\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(checkAuthMe());\r\n        dispatch(check_auth_me());\r\n    } else {\r\n        if(response.data.resultCode === CaptchaEnum.Captcha){\r\n            dispatch(getCaptcha())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error!'\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\n\r\nexport const logoutMe = (): GetThunkType => async (dispatch) => {\r\n    const response = await LoginAPI.logout()\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setNewAuth(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): GetThunkType => async (dispatch) => {\r\n    const response = await SecurityAPI.getCaptcha()\r\n    dispatch(actions.setNewCaptcha(response.data.url))\r\n}\r\n\r\nexport default header_reducer"]},"metadata":{},"sourceType":"module"}