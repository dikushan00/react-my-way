{"ast":null,"code":"import axios from \"axios\";\nvar instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    \"api-key\": \"201fbca2-9214-4c3c-bd7a-b698236c954c\"\n  }\n});\nexport var ResultCodeEnum;\n\n(function (ResultCodeEnum) {\n  ResultCodeEnum[ResultCodeEnum[\"Success\"] = 0] = \"Success\";\n  ResultCodeEnum[ResultCodeEnum[\"Error\"] = 1] = \"Error\";\n})(ResultCodeEnum || (ResultCodeEnum = {}));\n\nexport var CaptchaEnum;\n\n(function (CaptchaEnum) {\n  CaptchaEnum[CaptchaEnum[\"Captcha\"] = 10] = \"Captcha\";\n})(CaptchaEnum || (CaptchaEnum = {}));\n\nexport var UsersAPI = {\n  getUsers: function getUsers() {\n    var currentPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    var term = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    return instance.get(\"users?page=\".concat(currentPage, \"&count=\").concat(pageSize, \"&term=\").concat(term)).then(function (response) {\n      return response.data;\n    });\n  },\n  follow: function follow(userId) {\n    return instance.post(\"follow/\".concat(userId), {}).then(function (response) {\n      return response.data;\n    });\n  },\n  unfollow: function unfollow(userId) {\n    return instance.delete(\"follow/\".concat(userId)).then(function (response) {\n      return response.data;\n    });\n  },\n  getFriends: function getFriends() {\n    return instance.get(\"users?count=100&friend=true\").then(function (res) {\n      return res.data;\n    });\n  }\n};\nexport var AuthAPI = {\n  checkAuthMe: function checkAuthMe() {\n    return instance.get(\"auth/me\").then(function (response) {\n      return response.data;\n    });\n  }\n};\nexport var ProfileAPI = {\n  checkAuth: function checkAuth(userId) {\n    return instance.get(\"profile/\".concat(userId)).then(function (response) {\n      return response.data;\n    });\n  },\n  getStatus: function getStatus(userId) {\n    return instance.get(\"profile/status/\".concat(userId)).then(function (response) {\n      return response.data;\n    });\n  },\n  updateStatus: function updateStatus(status) {\n    return instance.put(\"profile/status\", {\n      status: status\n    }).then(function (response) {\n      return response.data;\n    });\n  },\n  updateMainPhoto: function updateMainPhoto(photo) {\n    var formData = new FormData();\n    formData.append(\"image\", photo);\n    return instance.put(\"profile/photo\", formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (response) {\n      return response.data;\n    });\n  },\n  saveProfile: function saveProfile(profile) {\n    return instance.put(\"profile\", profile);\n  }\n};\nexport var LoginAPI = {\n  checkLogin: function checkLogin(email, password, rememberMe) {\n    var captcha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    return instance.post(\"auth/login\", {\n      email: email,\n      password: password,\n      rememberMe: rememberMe,\n      captcha: captcha\n    });\n  },\n  logout: function logout() {\n    return instance.delete(\"auth/login\");\n  }\n};\nexport var SecurityAPI = {\n  getCaptcha: function getCaptcha() {\n    return instance.get(\"security/get-captcha-url\");\n  }\n};","map":{"version":3,"sources":["C:/Users/dikush/Documents/GitHub/react-my-way/src/api/api.ts"],"names":["axios","instance","create","withCredentials","baseURL","headers","ResultCodeEnum","CaptchaEnum","UsersAPI","getUsers","currentPage","pageSize","term","get","then","response","data","follow","userId","post","unfollow","delete","getFriends","res","AuthAPI","checkAuthMe","ProfileAPI","checkAuth","getStatus","updateStatus","status","put","updateMainPhoto","photo","formData","FormData","append","saveProfile","profile","LoginAPI","checkLogin","email","password","rememberMe","captcha","logout","SecurityAPI","getCaptcha"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { ProfileType, UserType, PhotosType, SaveProfileType } from \"../Types/Types\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"api-key\": \"201fbca2-9214-4c3c-bd7a-b698236c954c\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum{\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum CaptchaEnum {\r\n    Captcha = 10\r\n}\r\n\r\ntype CommonApiType = DeleteLoginType\r\n\r\ntype GetUsersType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport const UsersAPI = {\r\n\r\n    getUsers(currentPage: number = 1, pageSize: number = 10, term: string = '') {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n\r\n    follow(userId: number) {\r\n        return instance.post<CommonApiType>(`follow/${userId}`, {})\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n\r\n    unfollow(userId: number | null) {\r\n        return instance.delete<CommonApiType>(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n\r\n    getFriends() {\r\n        return instance.get<GetUsersType>(`users?count=100&friend=true`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\ntype AuthMeType = {\r\n    data: {id: number | null, login: string | null, email: string | null}\r\n    resultCode: ResultCodeEnum | CaptchaEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const AuthAPI = {\r\n\r\n    checkAuthMe() {\r\n        return instance.get<AuthMeType>(`auth/me`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    }\r\n}\r\n\r\ntype UpdatePhotoType = {\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n    messages: Array<string>\r\n    resultCode: ResultCodeEnum | CaptchaEnum\r\n}\r\n\r\nexport const ProfileAPI = {\r\n\r\n    checkAuth(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/${userId}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonApiType>(`profile/status`, {status})\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    updateMainPhoto(photo: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photo)\r\n        return instance.put<UpdatePhotoType>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    saveProfile(profile: SaveProfileType) {\r\n        return instance.put<CommonApiType>(`profile`, profile)\r\n    }\r\n}\r\n\r\ntype DeleteLoginType = {\r\n    data: {}\r\n    resultCode: ResultCodeEnum | CaptchaEnum\r\n    messages: Array<string>\r\n}\r\n\r\ntype PostLoginType = {\r\n    data: {userId: number}\r\n    resultCode: ResultCodeEnum | CaptchaEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const LoginAPI = {\r\n    checkLogin(email: string | null, password: string | null, rememberMe: boolean, captcha: string | null = null) {\r\n        return instance.post<PostLoginType>(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<DeleteLoginType>(`auth/login`)\r\n    }\r\n}\r\n\r\ntype GetCaptchaType = {\r\n    url: string\r\n}\r\n\r\nexport const SecurityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<GetCaptchaType>(`security/get-captcha-url`)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}