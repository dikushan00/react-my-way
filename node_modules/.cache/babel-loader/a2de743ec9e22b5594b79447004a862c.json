{"ast":null,"code":"export var base64StringtoFile = function base64StringtoFile(base64String, filename) {\n  if (base64String && base64String.length && base64String.length > 0) {\n    var arr = base64String.split(','),\n        //@ts-ignore\n    mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, {\n      type: mime\n    });\n  }\n};\nexport var getCroppedImg = function getCroppedImg(image, crop, fileName) {\n  var canvas = document.createElement('canvas');\n  var scaleX = image.naturalWidth / image.width;\n  var scaleY = image.naturalHeight / image.height;\n  canvas.width = crop.width;\n  canvas.height = crop.height;\n  var ctx = canvas.getContext('2d');\n  ctx && ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n  return new Promise(function (resolve, reject) {\n    canvas.toBlob(function (blob) {\n      if (!blob) {\n        console.error('Canvas is empty');\n        return;\n      } //@ts-ignore\n\n\n      blob.name = fileName;\n      var reader = new FileReader();\n      reader.readAsDataURL(blob);\n\n      reader.onload = function () {\n        var myFilename = \"previewFile.jpg\"; //@ts-ignore\n\n        var myNewCroppedFile = base64StringtoFile(reader.result, myFilename);\n        var myNewCroppedImgUrl = window.URL.createObjectURL(blob);\n        var newCropObject = {\n          myNewCroppedFile: myNewCroppedFile,\n          myNewCroppedImgUrl: myNewCroppedImgUrl\n        };\n        resolve(newCropObject);\n      };\n    }, 'image/jpeg');\n  });\n};\nexport var downloadCroppedImg = function downloadCroppedImg(url) {\n  var a = document.createElement('a');\n  a.href = url;\n  a.download = 'avatar.jpeg';\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n};","map":{"version":3,"sources":["C:/Users/dikush/Documents/GitHub/react-my-way/src/components/utils/Validators/cropImgFunctions.ts"],"names":["base64StringtoFile","base64String","filename","length","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","File","type","getCroppedImg","image","crop","fileName","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","reader","FileReader","readAsDataURL","onload","myFilename","myNewCroppedFile","result","myNewCroppedImgUrl","window","URL","createObjectURL","newCropObject","downloadCroppedImg","url","a","href","download","body","appendChild","click","removeChild"],"mappings":"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","sourcesContent":["\r\n\r\nexport const base64StringtoFile = (base64String: string, filename: string) => {\r\n    if(base64String && base64String.length && base64String.length > 0){\r\n        var arr = base64String.split(','),\r\n        //@ts-ignore\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]), n = bstr.length, \r\n        u8arr = new Uint8Array(n)\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n)\r\n      }\r\n      return new File([u8arr], filename, {type: mime})\r\n    }\r\n  }\r\n\r\n    \r\nexport const getCroppedImg = (image: HTMLImageElement, crop: ReactCrop.Crop, fileName: string) => {\r\n  const canvas = document.createElement('canvas');\r\n  const scaleX = image.naturalWidth / image.width;\r\n  const scaleY = image.naturalHeight / image.height;\r\n  canvas.width = crop.width;\r\n  canvas.height = crop.height;\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  ctx && ctx.drawImage(\r\n    image,\r\n    crop.x * scaleX,\r\n    crop.y * scaleY,\r\n    crop.width * scaleX,\r\n    crop.height * scaleY,\r\n    0,\r\n    0,\r\n    crop.width,\r\n    crop.height\r\n  )\r\n\r\n  return new Promise((resolve, reject) => {\r\n      canvas.toBlob(blob => {\r\n        if (!blob) {\r\n          console.error('Canvas is empty');\r\n          return;\r\n        }\r\n        //@ts-ignore\r\n        blob.name = fileName; \r\n        let reader = new FileReader()\r\n        reader.readAsDataURL(blob) \r\n        reader.onload = function() {\r\n        const myFilename = \"previewFile.jpg\"\r\n        //@ts-ignore\r\n        const myNewCroppedFile = base64StringtoFile(reader.result, myFilename)\r\n        const myNewCroppedImgUrl = window.URL.createObjectURL(blob)\r\n        let newCropObject = {\r\n          myNewCroppedFile,\r\n          myNewCroppedImgUrl\r\n        }\r\n        resolve(newCropObject);\r\n        };\r\n      }, 'image/jpeg');\r\n    });\r\n}\r\n\r\nexport const downloadCroppedImg = (url: string) => {\r\n  var a = document.createElement('a')\r\n  a.href = url\r\n  a.download = 'avatar.jpeg'\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n}"]},"metadata":{},"sourceType":"module"}