{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\dikush\\\\Documents\\\\GitHub\\\\react-my-way\\\\src\\\\components\\\\Profile\\\\ProfileInfo\\\\AvatarPhoto.tsx\";\n\nimport s from './ProfileInfo.module.css';\nimport photoUser from \"../../../img/user.svg\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport React, { useState } from 'react';\nimport { getCroppedImg } from '../../utils/Validators/cropImgFunctions';\nimport ReactCrop from 'react-image-crop';\n\nvar AvatarPhoto = function AvatarPhoto(_ref) {\n  var avatar = _ref.avatar,\n      fullName = _ref.fullName,\n      isOwner = _ref.isOwner,\n      updatePhoto = _ref.updatePhoto;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isBigMode = _useState2[0],\n      setBigMode = _useState2[1];\n\n  if (isBigMode) {\n    document.body.classList.add('pop_overflow');\n  } else {\n    document.body.classList.remove('pop_overflow');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: s.avaArea,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: avatar || photoUser,\n    alt: \"photo\",\n    className: s.avaImg,\n    onClick: function onClick() {\n      return setBigMode(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: s.avaHover,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSearch,\n    onClick: function onClick() {\n      return setBigMode(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  })), isBigMode && /*#__PURE__*/React.createElement(AvatarBigMode, {\n    isBigMode: isBigMode,\n    setBigMode: setBigMode,\n    avatarPhoto: avatar,\n    fullName: fullName,\n    isOwner: isOwner,\n    updatePhoto: updatePhoto,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 20\n    }\n  }));\n};\n\nvar AvatarBigMode = function AvatarBigMode(_ref2) {\n  var isBigMode = _ref2.isBigMode,\n      setBigMode = _ref2.setBigMode,\n      avatarPhoto = _ref2.avatarPhoto,\n      fullName = _ref2.fullName,\n      isOwner = _ref2.isOwner,\n      updatePhoto = _ref2.updatePhoto;\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imageRef = _useState4[0],\n      setImageRef = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoadImg = _useState6[0],\n      setIsLoadImg = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      src = _useState8[0],\n      setSrc = _useState8[1];\n\n  var _useState9 = useState({\n    croppedImageFile: null,\n    croppedImageUrl: ''\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      croppedObject = _useState10[0],\n      setCroppedObject = _useState10[1];\n\n  var _useState11 = useState({\n    unit: \"%\",\n    width: 30,\n    height: 30,\n    x: 0,\n    y: 0,\n    aspect: 1 / 1\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      crop = _useState12[0],\n      setCrop = _useState12[1];\n\n  var onInputPhoto = function onInputPhoto(e) {\n    if (e.target.files.length && e.target.files.length > 0) {\n      setIsLoadImg(true);\n      var reader = new FileReader();\n      reader.addEventListener('load', function () {\n        return setSrc(reader.result);\n      });\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  var onImageLoaded = function onImageLoaded(image) {\n    setImageRef(image);\n  };\n\n  var onCropComplete = function onCropComplete(crop, percentCrop) {\n    makeClientCrop(crop);\n  };\n\n  var onCropChange = function onCropChange(crop, percentCrop) {\n    //@ts-ignore\n    setCrop(crop);\n  };\n\n  var makeClientCrop = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop) {\n      var _croppedObject;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(imageRef && crop.width && crop.height)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return getCroppedImg(imageRef, crop, 'newFile.jpeg');\n\n            case 3:\n              _croppedObject = _context.sent;\n              //@ts-ignore\n              setCroppedObject(_croppedObject);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function makeClientCrop(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var updatePhotoCrop = function updatePhotoCrop() {\n    croppedObject && croppedObject.croppedImageFile && updatePhoto(croppedObject.croppedImageFile);\n    setIsLoadImg(false);\n    refreshInputArea();\n  };\n\n  var refreshInputArea = function refreshInputArea() {\n    setSrc(null);\n    setCroppedObject(null);\n    setIsLoadImg(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"overlay\",\n    className: isBigMode ? \"overlay\" : '',\n    onClick: function onClick() {\n      return setBigMode(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: isBigMode ? s.BigModeArea : '',\n    id: s.BigModeArea,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: avatarPhoto ? avatarPhoto : photoUser,\n    alt: \"PHOTO\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: s.rightContent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"60px\",\n      borderBottom: \"1px solid #ccc\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: avatarPhoto ? avatarPhoto : photoUser,\n    alt: \"PHOTO\",\n    className: s.postImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: s.user,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, fullName)), /*#__PURE__*/React.createElement(\"span\", {\n    className: s.closeBig,\n    onClick: function onClick() {\n      return setBigMode(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), isOwner && /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: onInputPhoto,\n    className: s.inputPhoto,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }), src && isLoadImg && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(ReactCrop //@ts-ignore\n  , {\n    src: src,\n    crop: crop,\n    ruleOfThirds: true,\n    onImageLoaded: onImageLoaded,\n    onComplete: onCropComplete,\n    onChange: onCropChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }), croppedObject && croppedObject.croppedImageUrl &&\n  /*#__PURE__*/\n  //@ts-ignore\n  React.createElement(\"img\", {\n    alt: \"Crop\",\n    style: {\n      maxWidth: '100%'\n    },\n    src: croppedObject.croppedImageUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return updatePhotoCrop();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, \" Send \")))));\n};\n\nexport default AvatarPhoto;","map":{"version":3,"sources":["C:/Users/dikush/Documents/GitHub/react-my-way/src/components/Profile/ProfileInfo/AvatarPhoto.tsx"],"names":["s","FontAwesomeIcon","faSearch","React","useState","getCroppedImg","ReactCrop","AvatarPhoto","avatar","fullName","isOwner","updatePhoto","isBigMode","setBigMode","document","body","classList","add","remove","avaArea","photoUser","avaImg","avaHover","AvatarBigMode","avatarPhoto","imageRef","setImageRef","isLoadImg","setIsLoadImg","src","setSrc","croppedImageFile","croppedImageUrl","croppedObject","setCroppedObject","unit","width","height","x","y","aspect","crop","setCrop","onInputPhoto","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onImageLoaded","image","onCropComplete","percentCrop","makeClientCrop","onCropChange","updatePhotoCrop","refreshInputArea","BigModeArea","display","alignItems","rightContent","borderBottom","postImg","user","closeBig","inputPhoto","maxWidth"],"mappings":"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","sourcesContent":["import  s from './ProfileInfo.module.css'\r\nimport photoUser from '../../../img/user.svg'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport  React, { useState, RefObject } from 'react';\r\nimport { getCroppedImg } from '../../utils/Validators/cropImgFunctions';\r\nimport  ReactCrop  from 'react-image-crop';\r\n\r\nconst AvatarPhoto: React.FC<PropsType> = ({avatar, fullName, isOwner, updatePhoto}) => {\r\n\r\n    const [isBigMode, setBigMode] = useState(false)\r\n\r\n    if(isBigMode) {\r\n        document.body.classList.add('pop_overflow')\r\n    } else {\r\n        document.body.classList.remove('pop_overflow')\r\n    }\r\n\r\n    return <div className={s.avaArea}>\r\n        <img src={ avatar || photoUser } alt=\"photo\" className={s.avaImg} onClick = {() => setBigMode(true)}/>\r\n        <span className = {s.avaHover}>\r\n            <FontAwesomeIcon icon={faSearch} onClick = {() => setBigMode(true)}/> \r\n        </span>\r\n        {\r\n            isBigMode \r\n                && <AvatarBigMode \r\n                    isBigMode = {isBigMode} \r\n                    setBigMode = {setBigMode} \r\n                    avatarPhoto = {avatar} \r\n                    fullName = {fullName} \r\n                    isOwner = {isOwner}\r\n                    updatePhoto = {updatePhoto}/>\r\n        }\r\n    </div>\r\n}\r\n\r\nconst AvatarBigMode: React.FC<BigModeType> = ({ isBigMode, setBigMode, avatarPhoto, fullName, isOwner, updatePhoto}) => {\r\n    \r\n    const [imageRef, setImageRef] = useState(null as null | HTMLImageElement)\r\n    const [isLoadImg, setIsLoadImg] = useState(false)\r\n    const [src, setSrc] = useState(null as string | ArrayBuffer | null)\r\n    const [croppedObject, setCroppedObject] = useState({\r\n            croppedImageFile: null as null | File,\r\n            croppedImageUrl: '',\r\n        } as CroppedImgType | null)\r\n    const [crop, setCrop] = useState({\r\n          unit: \"%\" as \"%\" | \"px\" | undefined,\r\n          width: 30,\r\n          height: 30,\r\n          x: 0,\r\n          y: 0,\r\n          aspect: 1 / 1 as number\r\n        })\r\n\r\n    const onInputPhoto = (e: any) => {\r\n        if(e.target.files.length && e.target.files.length > 0){\r\n            setIsLoadImg(true)\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () =>\r\n                setSrc( reader.result )\r\n            );\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onImageLoaded = (image: HTMLImageElement) => {\r\n        setImageRef(image)\r\n      };\r\n    \r\n    const onCropComplete = (crop: ReactCrop.Crop , percentCrop: ReactCrop.PercentCrop) => {\r\n      makeClientCrop(crop);\r\n    };\r\n  \r\n    const onCropChange = (crop: ReactCrop.Crop, percentCrop: ReactCrop.PercentCrop) => {\r\n        //@ts-ignore\r\n        setCrop( crop );\r\n      };\r\n    \r\n    const makeClientCrop = async (crop: ReactCrop.Crop) => {\r\n        if (imageRef && crop.width && crop.height) {\r\n          const croppedObject = await getCroppedImg(\r\n            imageRef,\r\n            crop,\r\n            'newFile.jpeg'\r\n          )\r\n          \r\n          //@ts-ignore\r\n          setCroppedObject( croppedObject );\r\n        }\r\n      }\r\n\r\n    const updatePhotoCrop = () => {\r\n        croppedObject && croppedObject.croppedImageFile && updatePhoto(croppedObject.croppedImageFile)\r\n        setIsLoadImg(false)\r\n        refreshInputArea()\r\n    }\r\n\r\n    const refreshInputArea = () => {\r\n      setSrc(null)\r\n      setCroppedObject(null)\r\n      setIsLoadImg(true)\r\n    }\r\n\r\n    return <div>\r\n    <div id=\"overlay\" className = {isBigMode ? \"overlay\" : ''} onClick={() => setBigMode(false)}></div>\r\n    <div className = {isBigMode  ? s.BigModeArea : ''} id = {s.BigModeArea}>\r\n        <div style = {{ display: \"flex\", alignItems: \"center\"}} >\r\n            <img src={avatarPhoto ? avatarPhoto : photoUser} alt=\"PHOTO\" />\r\n        </div>\r\n        <div className = {s.rightContent} >\r\n            <span style = {{display: \"flex\", alignItems: \"center\", height: \"60px\", borderBottom: \"1px solid #ccc\"}}>\r\n                <img src={avatarPhoto ? avatarPhoto : photoUser} alt=\"PHOTO\" className = {s.postImg} />\r\n                <span className={s.user}>{fullName}</span>\r\n            </span>\r\n            <span className = {s.closeBig} onClick={() => setBigMode(false)}></span>\r\n            {isOwner && <input type=\"file\" onChange={onInputPhoto} className={s.inputPhoto}/>}\r\n            { \r\n                src && isLoadImg && <div>\r\n                    <ReactCrop\r\n                    //@ts-ignore\r\n                        src={src}\r\n                        crop={crop}\r\n                        ruleOfThirds\r\n                        onImageLoaded={onImageLoaded}\r\n                        onComplete={onCropComplete}\r\n                        onChange={onCropChange}\r\n                />\r\n                {   croppedObject && croppedObject.croppedImageUrl && \r\n                    //@ts-ignore\r\n                    <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedObject.croppedImageUrl} />\r\n                }\r\n                <button onClick = {() => updatePhotoCrop()}> Send </button>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n    </div>\r\n}\r\n\r\ntype PropsType = {\r\n    avatar: string | null\r\n    fullName: string\r\n    isOwner: boolean\r\n\r\n    updatePhoto: (file: File) => void\r\n}\r\n\r\ntype BigModeType = {\r\n    isBigMode: boolean\r\n    avatarPhoto: string | null | undefined\r\n    fullName: string\r\n    isOwner: boolean\r\n\r\n    setBigMode: (n: boolean) => void\r\n    updatePhoto: (file: File) => void\r\n}\r\n\r\ntype CroppedImgType = {\r\n    croppedImageFile: null | File\r\n    croppedImageUrl: string\r\n}\r\n\r\nexport default AvatarPhoto"]},"metadata":{},"sourceType":"module"}